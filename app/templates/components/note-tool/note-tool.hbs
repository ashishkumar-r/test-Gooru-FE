<div class="height-width-parent relative-position">
   <div class="note-header-box">
     <div class="pull-right">
        <i class="gru-icon material-icons close-note pull-right" {{action "onCloseNote"}}>close</i>
        <i class="gru-icon material-icons move-notes pull-right">control_camera</i>
      </div>
   </div>
    <iframe id="noteIframe" class="frame-height-width" srcdoc="<div id='app'></div><script src='/assets/note-tool/notes-taking-tool.js'></script><link rel='stylesheet' href='https://fonts.googleapis.com/css?family=Lato:400,300,300italic,400italic,700,700italic|Playfair+Display:400,300,300italic,400italic,700,700italic|Open+Sans:400,300,300italic,400italic,700,700italic|Material+Icons|Material+Icons+Outlined|Material+Icons+Two+Tone|Material+Icons+Round|Material+Icons+Sharp'
      rel='stylesheet' type='text/css'>">
    </iframe>
</div>

<script type="module">
  import interact from 'https://cdn.interactjs.io/v1.10.11/interactjs/index.js';
  
  interact('.resize-drag')
    .resizable({
      // resize from all edges and corners
      edges: {
        left: true,
        right: true,
        bottom: true,
        top: true
      },

      listeners: {
        move(event) {
          var newXValue = 0;
          if(window.innerWidth >= 916) {
            newXValue =  window.innerWidth - 1100;
          }
          var target = event.target
          var x = (parseFloat(target.getAttribute('data-x')) || newXValue);
          var y = (parseFloat(target.getAttribute('data-y')) || 0)

          // update the element's style
          target.style.width = (900 > event.rect.width) ? 900 + 'px' : event.rect.width + 'px';
          target.style.height = (400 > event.rect.height)?  400  + 'px' : event.rect.height + 'px';

          // translate when resizing from top or left edges
          x += event.deltaRect.left
          y += event.deltaRect.top

          target.style.transform = 'translate(' + x + 'px,' + y + 'px)'

          target.setAttribute('data-x', x)
          target.setAttribute('data-y', y)
         // target.textContent = Math.round(event.rect.width) + '\u00D7' + Math.round(event.rect.height)
        }
      },
      modifiers: [
        // keep the edges inside the parent
        interact.modifiers.restrictEdges({
          outer: 'parent'
        }),

        // minimum size
        interact.modifiers.restrictSize({
          min: {
            width: 900,
            height: 400
          }
        })
      ],

      inertia: true
    })
    // target elements with the "draggable" class
    .draggable({
      // enable inertial throwing
      inertia: true,
      // keep the element within the area of it's parent
      modifiers: [
        interact.modifiers.restrictRect({
          restriction: 'parent',
          endOnly: true
        })
      ],
      // enable autoScroll
      autoScroll: true,

      listeners: {
        // call this function on every dragmove event
        move: dragMoveListener,
      }
    })

  function dragMoveListener(event) {
    var target = event.target
    var newXValue = 0;
    if(window.innerWidth >= 916) {
      newXValue =  window.innerWidth - 1100;
    }
    // keep the dragged position in the data-x/data-y attributes
    var x = (parseFloat(target.getAttribute('data-x')) || newXValue) + event.dx
    var y = (parseFloat(target.getAttribute('data-y')) || 0) + event.dy

    // translate the element
    target.style.transform = 'translate(' + x + 'px, ' + y + 'px)'

    // update the posiion attributes
    target.setAttribute('data-x', x)
    target.setAttribute('data-y', y)
  }

  // this function is used later in the resizing and gesture demos
  window.dragMoveListener = dragMoveListener
</script>

